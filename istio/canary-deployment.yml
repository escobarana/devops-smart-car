apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: smartcar-gateway
spec:
  selector:
    istio: ingressgateway # use istio default controller
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "flask.example.com"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: smartcarvirtualservice
spec:
  hosts:
  - "flask.example.com"
  gateways:
  - smartcar-gateway
  http:
  - match:
    - uri:
        prefix: /cars
    - uri:
        prefix: /swagger.json
    route:
    - destination:
        port:
          number: 5000
        host: flask.default.svc.cluster.local
        subset: v1
      weight: 80
    - destination:
        host: flask.default.svc.cluster.local
        subset: v2
        port:
          number: 5000
      weight: 20
---
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: flaskdestinationrule
spec:
  host: flask.default.svc.cluster.local
  subsets:
  - name: v1
    labels:
      version: v1  # latest tag in docker image
  - name: v2
    labels:
      version: v2

# Two destination routes defined. One is having the weight of 80 and the subset is v1 and another is 20 and the subset is v2.
# DestinationRule defines the labels of the target service based on version labels. So subset v1 is forwarding requests
# to current version of live application and v2 is the canary which we are releasing in the system gradually.